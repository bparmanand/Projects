out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_price,
main = 'Kernel-Smoothed pdf of House Prices',
xlab = 'Price',
col = 'blue', lwd = 3)
dev.off()
##################################################
# Kernel-smoothed pdf of the natural logarithm of price.
print('Plotting kernel-smoothed pdf')
print('of the natural logarithm of price.')
##################################################
density_log_price <- density(homeprices[, 'log_Price'])
fig_file_name <- 'density_log_prices.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_log_price,
main = 'Kernel-Smoothed pdf of the Natural Log. of House Prices',
xlab = 'Logarithm of Price',
col = 'blue', lwd = 3)
dev.off()
#--------------------------------------------------
# Compare Prices and Transformation for Normality
print(c('Calculating Q-Q Plots of Dependent Variable.'))
#--------------------------------------------------
# To compare these to the normal distribution,
# we can draw a Q-Q plot, plotting the quantiles of
# each on a scatterplot.
# Plot normal QQ plot for House Prices.
fig_file_name <- 'qq_prices.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(homeprices[, 'Price'],
main = 'Q-Q Plot of House Prices') # ,
qqline(homeprices[, 'Price'],
col = 'blue', lwd = 3) # ,
dev.off()
# Plot normal QQ plot for House Prices Duplicate
fig_file_name <- 'qq_prices2.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(homeprices[, 'Price'],
main = 'Q-Q Plot of House Prices') # ,
qqline(homeprices[, 'Price'],
col = 'blue', lwd = 3) # ,
dev.off()
# Plot normal QQ plot for the log of House Prices.
fig_file_name <- 'qq_log_prices.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(homeprices[, 'log_Price'],
main = 'Q-Q Plot of the Log. of House Prices') # ,
qqline(homeprices[, 'log_Price'],
col = 'blue', lwd = 3) # ,
dev.off()
##################################################
# Calculating Box-Cox Transformation
# for Univariate Likelihood Function.
print(c('Calculating Box-Cox Transformation',
'for Univariate Likelihood Function.'))
##################################################
##################################################
# Defining a Univariate Likelihood Function
##################################################
#--------------------------------------------------
# Coding and optimizing own function
#--------------------------------------------------
# First, define a function that performs a
# Box-Cox transformation.
# Note: "lambda" does not mean what it does in Python.
# You can make functions on-the-fly with the "function" function in R.
# For this reason, I call the function by a different name, BoxCox_Trans.
# Box-Cox transformation.
BoxCox_Trans <- function(price, lambda) {
if (lambda == 0) {
return(log(price))
} else {
return((price^lambda - 1)/lambda)
}
}
log_like_uni <- function(price, lambda) {
n <- length(price)
BoxCox_Trans <- BoxCox_Trans(price, lambda)
mu_0_lambda <- mean(BoxCox_Trans)
sigma_2_lambda <- sum((BoxCox_Trans - mu_0_lambda)^2)/n
like <- - n/2*log(2*pi*sigma_2_lambda)
like <- like - 1/2/sigma_2_lambda*sum((BoxCox_Trans - mu_0_lambda)^2)
like <- like + (lambda - 1)*sum(log(price))
return(like)
}
# Calculate values of the log-likelihood function.
lambda_grid <- seq(-1, 2.5, by = 0.001)
like_grid <- 0*lambda_grid
for (lambda_num in 1:length(lambda_grid)) {
like_grid[lambda_num] <- log_like_uni(price = homeprices[, 'Price'],
lambda = lambda_grid[lambda_num])
}
# Find the MLE, the unrestricted estimate.
lambda_hat <- lambda_grid[which.max(like_grid)]
like_MLE <- max(like_grid)
# Check:
# like_MLE == log_like_uni(price = homeprices[, 'Price'], lambda = lambda_hat)
# Calculate restricted likelihood values for mu = 0, 1.
like_mu_0 <- log_like_uni(price = homeprices[, 'Price'], lambda = 0)
like_mu_1 <- log_like_uni(price = homeprices[, 'Price'], lambda = 1)
# Plot the log-likelihood function.
fig_file_name <- 'box_cox_loglike_uni.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(x = lambda_grid, y = like_grid,
type = 'l',
main = 'Log-likelihood Function',
xlab = 'Lambda',
ylab = 'Log-likelihood',
col = 'blue', lwd = 3)
points(c(0, 1), c(like_mu_0, like_mu_1),
col = 'red', lwd = 2)
points(lambda_hat, like_MLE,
col = 'red', lwd = 3)
dev.off()
#--------------------------------------------------
# Testing for appropriate transformation
#--------------------------------------------------
# Now consider the statistical properties of these estimates.
# Calculate likelihood ratio statistics.
LR_stat_0 <- - 2*(like_mu_0 - like_MLE)
print(LR_stat_0)
LR_stat_1 <- - 2*(like_mu_1 - like_MLE)
print(LR_stat_1)
# Compare to quantile of chi-squared distribution with 1 degree of freedom.
LR_cv_5 <- qchisq(p = 0.95, df = 1)
print(LR_cv_5)
# Calculate p-values for these tests.
p_value_0 <- 1 - pchisq(q = LR_stat_0, df = 1)
print(p_value_0)
p_value_1 <- 1 - pchisq(q = LR_stat_1, df = 1)
print(p_value_1)
# Statistically, this is evidence to reject them both.
# This suggests using the transformation at the MLE.
#--------------------------------------------------
# Using the MASS package
#--------------------------------------------------
# As an illustration, we calculated
# the likelihood ourselves.
# However, there exist other packages
# to output the estimation results for
# an optimal Box-Cox transformation.
# Use the function from the MASS package.
# In the MASS package, the notation is the same as for a linear model.
summary(lm(Price ~ 1, data = homeprices))
# Note the package::function_name() notation here because
# the boxcox call is ambiguous (several boxcox functions are loaded
# each one from a different package).
bc_grid_MASS <- MASS::boxcox(Price ~ 1,
data = homeprices,
lambda = lambda_grid)
# Find the MLE.
max_lambda_MASS <- bc_grid_MASS$x[which.max(bc_grid_MASS$y)]
# Plot from the model object.
fig_file_name <- 'plot_like_MASS.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(bc_grid_MASS$x, bc_grid_MASS$y,
type = 'l',
main = 'Log-likelihood Function (from MASS package)',
xlab = 'Lambda',
ylab = 'Log-likelihood',
col = 'blue', lwd = 3)
lines(x = c(max_lambda_MASS, max_lambda_MASS),
y = c(min(bc_grid_MASS$y), max(bc_grid_MASS$y)),
lty = 'dashed')
dev.off()
#--------------------------------------------------
# Using the car package
#--------------------------------------------------
# Use the function from the car package.
# Plot from the model object.
fig_file_name <- 'plot_like_car.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
bc_grid_car <- car::boxCox(object = lm(data = homeprices,
formula = Price ~ 1),
lambda = lambda_grid)
dev.off()
#--------------------------------------------------
# Using the EnvStats package
#--------------------------------------------------
bc_grid_ES <- EnvStats::boxcox(x = homeprices[, 'Price'],
lambda = lambda_grid,
optimize = FALSE,
objective.name = "Log-Likelihood")
# Find optimal value of lambda.
bc_grid_ES_opt <- EnvStats::boxcox(x = homeprices[, 'Price'],
lambda = range(lambda_grid),
optimize = TRUE,
objective.name = "Log-Likelihood")
bc_grid_ES_opt$lambda
fig_file_name <- 'plot_like_EnvStats.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(bc_grid_ES$lambda, bc_grid_ES$objective,
type = 'l',
main = 'Log-likelihood Function (from EnvStats package)',
xlab = 'Lambda',
ylab = 'Log-likelihood')
lines(x = c(bc_grid_ES_opt$lambda, bc_grid_ES_opt$lambda),
y = c(min(bc_grid_ES$objective), max(bc_grid_ES$objective)),
lty = 'dashed')
dev.off()
#--------------------------------------------------
# Compare Prices and Transformation for Normality
#--------------------------------------------------
# We already plotted normal QQ plot for House Prices.
# Generate new dependent variable with results from estimates above.
homeprices[, 'Trans_Price'] <- BoxCox_Trans(price = homeprices[, 'Price'],
lambda = lambda_hat)
# Plot normal QQ plot for Transformed House Prices.
fig_file_name <- 'qq_boxcox.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(homeprices[, 'Trans_Price'],
main = 'Q-Q Plot of the Log. of House Prices') # ,
qqline(homeprices[, 'Trans_Price'],
col = 'blue', lwd = 3) # ,
dev.off()
# From a purely statistical perspective,
# this provides evidence that the prices are best modeled with the transformation
# at the optimal lambda_hat = 0.43.
# From a practical point of view, however,
# it is still an open question whether this
# added complexity is warranted when other variables are added to the model.
#--------------------------------------------------
# Add variables to regression equation.
# Now we are checking the residuals for normality.
#--------------------------------------------------
# Start with the most important variable.
bc_grid_MASS <- MASS::boxcox(Price ~ NumBeds + NumBaths + FloorSpace,
data = homeprices,
lambda = lambda_grid)
# Find the MLE.
max_lambda_MASS <- bc_grid_MASS$x[which.max(bc_grid_MASS$y)]
# Plot from the model object.
fig_file_name <- 'plot_like_MASS_var.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(bc_grid_MASS$x, bc_grid_MASS$y,
type = 'l',
main = 'Log-likelihood Function with explanatory variables (from MASS package)',
xlab = 'Lambda',
ylab = 'Log-likelihood',
col = 'blue', lwd = 3)
lines(x = c(max_lambda_MASS, max_lambda_MASS),
y = c(min(bc_grid_MASS$y), max(bc_grid_MASS$y)),
lty = 'dashed')
dev.off()
# Add other variables.
# bc_grid_MASS <- MASS::boxcox(# Price ~ Country + Sealed + Machined,
#                              # Price ~ Country + Sealed + Machined,
#                              Price ~ Country + Sealed + Machined +
#                                Weight + Diameter + Width,
#                              data = homeprices,
#                              lambda = lambda_grid)
# Find the MLE.
# max_lambda_MASS <- bc_grid_MASS$x[which.max(bc_grid_MASS$y)]
#
# # Plot from the model object.
# plot(bc_grid_MASS$x, bc_grid_MASS$y,
#      type = 'l',
#      main = 'Log-likelihood Function (from MASS package)',
#      xlab = 'Lambda',
#      ylab = 'Log-likelihood',
#      col = 'blue', lwd = 3)
# lines(x = c(max_lambda_MASS, max_lambda_MASS),
#       y = c(min(bc_grid_MASS$y), max(bc_grid_MASS$y)),
#       lty = 'dashed')
# Here, one could make the case to take logs,
# based on the optimal transformation,
# even though the problem of skewness is not so severe.
# Once we move to a more realistic model, the residuals are
# skewed in a way that warrants taking logs.
##################################################
# End
##################################################
rm(list=ls(all=TRUE))
# # Set working directory, if running interactively.
wd_path <- '~/GitHub/Brandon_QMB6912S23/Problem Set 11'
setwd(wd_path)
# Set data directory.
data_dir <- 'Data'
# Set directory for storing figures.
# fig_dir <- 'Figures' # Last week.
# Set directory for storing tables.
tab_dir <- 'Tables'
##################################################
# Load libraries
##################################################
# install.packages('xtable')
library(xtable)
##################################################
# Load Data
##################################################
# Set parameters for homepricess dataset.
in_file_name <- sprintf('%s/%s', data_dir, 'HomeSales.dat')
home_col_names <- c('YearBuilt', 'NumBeds', 'NumBaths', 'FloorSpace', 'LotSize',
'HasGarage', 'HasEnclPatio', 'HasSecGate', 'HasPool', 'TransitScore',
'SchoolScore', 'TypeOfBuyer','Price' )
# Load data.
homeprices <- read.table(file = in_file_name, header = FALSE,
col.names = home_col_names)
# Initial inspection.
print('Summary of Home Price Dataset:')
print(summary(homeprices))
# Make sure there are no problems with the data.
##################################################
# Generating Variables
##################################################
# Set categorical variables as factors.
cat_var_list <- colnames(homeprices)[lapply(homeprices, class) == "character"]
for (var_name in cat_var_list) {
homeprices[, var_name] <- as.factor(homeprices[, var_name])
}
# Initial inspection.
print('Homeprices Dataset with Categorical Factors:')
print(summary(homeprices))
# Create logarithm of dependent variable.
homeprices[, 'log_Price'] <- log(homeprices[, 'Price'])
# Create variable "Age" of the houses by taking year of data - year built
homeprices[, 'Age'] <- 2021 - homeprices$YearBuilt
summary(homeprices$Age)
# convert integer numerical variables to as.numeric to help with formula below
# that converts tables
homeprices$FloorSpace <- as.numeric(homeprices$FloorSpace)
homeprices$LotSize <- as.numeric(homeprices$LotSize)
homeprices$TransitScore <- as.numeric(homeprices$TransitScore)
homeprices$SchoolScore <- as.numeric(homeprices$SchoolScore)
homeprices$Price <- as.numeric(homeprices$Price)
t(t(sapply(homeprices, class)))
##################################################
# Summarize numeric variables.
##################################################
#--------------------------------------------------
print('Summarizing Numeric Variables')
print('Summary by Type of Buyer:')
#--------------------------------------------------
# Summarize numeric variables by Owner occupied or rental homes.
buyer_sum <- data.frame(TypeOfBuyer = unique(homeprices$TypeOfBuyer))
for (var_name in colnames(homeprices)[lapply(homeprices, class) == 'numeric']) {
col_names <- sprintf('%s %s', c('Min.', 'Mean', 'Max.'), var_name)
# buyer_sum[, col_names] <- tapply(homeprices$Price, homeprices$Country,
#                                    function(x) format(summary(x), scientific = FALSE)[c(1,4,6)])
# buyer_sum[, col_names] <- tapply(homeprices[, var_name], homeprices$Country,
#                                    function(x) format(summary(x), scientific = FALSE)[c(1,4,6)])
sub_tab <- tapply(homeprices[, var_name], homeprices$TypeOfBuyer,
function(x) format(summary(x), scientific = FALSE)[c(1,4,6)])
for (row in 1:length(sub_tab)) {
buyer_sum[row, col_names] <- unlist(sub_tab[row])
}
}
# Select values for output.
# t(X) denotes the transpose of X.
out_tab <- t(buyer_sum[, 2:ncol(buyer_sum)])
colnames(out_tab) <- buyer_sum[, 1]
print(out_tab)
#--------------------------------------------------
# Output to TeX file.
#--------------------------------------------------
library(xtable)
out_xtable <- xtable(out_tab[, ],
digits = 0, label = 'tab:summ_by_buyer',
caption = 'Summary by Type of Buyer')
tab_file_name <- sprintf('summ_by_buyer.tex')
tab_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
##################################################
# Summarize categorical variables.
##################################################
#--------------------------------------------------
print('Summarizing Categorical Variables')
#--------------------------------------------------
tab_var_list <- colnames(homeprices)[c(2:3, 6:9)]
# Inspect visually before creating tables.
table(homeprices[, 'NumBeds'], useNA = 'ifany')
table(homeprices[, 'NumBaths'], useNA = 'ifany')
table(homeprices[, 'HasGarage'], useNA = 'ifany')
table(homeprices[, 'HasEnclPatio'], useNA = 'ifany')
table(homeprices[, 'HasSecGate'], useNA = 'ifany')
table(homeprices[, 'HasPool'], useNA = 'ifany')
#--------------------------------------------------
print('Indicator Variables by Make of Tractor')
#--------------------------------------------------
table(homeprices[, 'TypeOfBuyer'], homeprices[, 'NumBeds'], useNA = 'ifany')
table(homeprices[, 'TypeOfBuyer'], homeprices[, 'NumBaths'], useNA = 'ifany')
table(homeprices[, 'TypeOfBuyer'], homeprices[, 'HasGarage'], useNA = 'ifany')
table(homeprices[, 'TypeOfBuyer'], homeprices[, 'HasEnclPatio'], useNA = 'ifany')
table(homeprices[, 'TypeOfBuyer'], homeprices[, 'HasSecGate'], useNA = 'ifany')
table(homeprices[, 'TypeOfBuyer'], homeprices[, 'HasPool'], useNA = 'ifany')
# Assemble these into a table for output.
out_tab <- rbind(table(homeprices[, 'TypeOfBuyer'], useNA = 'ifany'),
table(homeprices[, 'NumBeds'], homeprices[, 'TypeOfBuyer'], useNA = 'ifany'),
table(homeprices[, 'NumBaths'], homeprices[, 'TypeOfBuyer'], useNA = 'ifany'),
table(homeprices[, 'HasGarage'], homeprices[, 'TypeOfBuyer'], useNA = 'ifany'),
table(homeprices[, 'HasEnclPatio'], homeprices[, 'TypeOfBuyer'], useNA = 'ifany'),
table(homeprices[, 'HasSecGate'], homeprices[, 'TypeOfBuyer'], useNA = 'ifany'),
table(homeprices[, 'HasPool'], homeprices[, 'TypeOfBuyer'], useNA = 'ifany')
)
# Specify column and row names and add totals.
#colnames(out_tab) <- c("Other", "John Deere")
rownames(out_tab) <- c("Total", "1bed", "2bed","3bed","4bed", "6bed", "8bed",
"1bath", "2bath", "3bath", "Garage", "No Garage", "Patio",
"No Patio", "Security Gate", "No Sec Gate", "Pool",
"No Pool")
# Switch column order to focus on John Deere. No need as owner is in front
#out_tab <- out_tab[, c(2, 1)]
# Add totals for rows.
out_tab <- cbind(out_tab, rowSums(out_tab))
colnames(out_tab)[length(colnames(out_tab))] <- "Totals"
print(out_tab)
#--------------------------------------------------
# Output selected columns to TeX file.
#--------------------------------------------------
out_xtable <- xtable(out_tab[, ],
digits = 0, label = 'tab:ind_by_buyer',
caption = 'Indicator Variables by Type of Buyer')
tab_file_name <- sprintf('ind_by_buyer.tex')
tab_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
##################################################
# Summarize average prices across categorical variables.
##################################################
#--------------------------------------------------
print('Average House Prices with included Amenities')
#--------------------------------------------------
avg_price_pool<- with(homeprices, tapply(Price, list(TypeOfBuyer, HasPool), FUN= mean))
colnames(avg_price_pool) <- c("No Pool", "Pool")
avg_price_patio <- with(homeprices, tapply(Price, list(TypeOfBuyer, HasEnclPatio), FUN= mean))
colnames(avg_price_patio) <- c("No Patio", "Patio")
avg_price_garage<- with(homeprices, tapply(Price, list(TypeOfBuyer, HasGarage), FUN= mean))
colnames(avg_price_garage) <- c("No Garage", "Garage")
avg_price_security <- with(homeprices, tapply(Price, list(TypeOfBuyer, HasSecGate), FUN= mean))
colnames(avg_price_security) <- c("No Sec Gate", "Sec Gate")
out_tab <- cbind(avg_price_pool, avg_price_patio, avg_price_garage, avg_price_security)
# out_tab is a matrix.
class(out_tab)
# Change to a data.frame.
out_tab <- data.frame(out_tab)
# Output another set of columns to another TeX file.
out_xtable <- xtable(out_tab[, ],
digits = 0, label = 'tab:avg_price_by_amen',
caption = 'Average Price of Houses by Amenities')
tab_file_name <- sprintf('avg_price_by_amen.tex')
tab_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
avg_price_bedrooms <- with(homeprices, tapply(Price, list(TypeOfBuyer, NumBeds), FUN= mean))
colnames(avg_price_bedrooms) <- c("1bed", "2beds", "3beds", "4beds", "6beds", "8beds")
out_tab <- avg_price_bedrooms
# Output another set of columns to another TeX file.
# Output another set of columns to another TeX file.
out_xtable <- xtable(out_tab[, ],
digits = 0, label = 'tab:avg_price_by_bed',
caption = 'Average Price of Houses by Bedrooms')
tab_file_name <- sprintf('avg_price_by_bed.tex')
tab_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
avg_price_bathrooms <- with(homeprices, tapply(Price, list(TypeOfBuyer, NumBaths), FUN= mean))
colnames(avg_price_bathrooms) <- c("1bath", "2baths", "3baths")
out_tab <- avg_price_bathrooms
# Output another set of columns to another TeX file.
out_xtable <- xtable(out_tab[, ],
digits = 0, label = 'tab:avg_price_by_bath',
caption = 'Average Price of Houses by Bathrooms')
tab_file_name <- sprintf('avg_price_by_bath.tex')
tab_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
##################################################
# Analyze Correlation.
##################################################
#--------------------------------------------------
print('Correlation Matrix for Numeric Variables')
#--------------------------------------------------
tab_var_list <- colnames(homeprices)[c(4:5,10:11,14:15)]
# Calculate covariance matrix.
out_tab <- cor(homeprices[, tab_var_list])
# colnames(out_tab) <- c('Log. of Price', 'Horsepower', 'Age', 'Engine Hours')
# rownames(out_tab) <- c('Log. of Price', 'Horsepower', 'Age', 'Engine Hours')
print(out_tab)
out_xtable <- xtable(out_tab[, ],
digits = 3,
label = 'tab:correlation_num',
caption = 'Correlation Matrix of Log. Prices and Numeric Variables')
tab_file_name <- sprintf('correlation_num.tex')
tab_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
#--------------------------------------------------
print('Correlation Matrix for Categorical Variables')
#--------------------------------------------------
# Investigate relationship between prices and indicator variables.
tab_var_list <- colnames(homeprices)[c(2:3, 6:9, 14)]
# Select values for output.
out_tab <- cor(homeprices[, tab_var_list])
# colnames(out_tab) <- c('Log. of Price', 'Diesel', 'FWD', 'Manual', 'Cab')
# rownames(out_tab) <- c('Log. of Price', 'Diesel', 'FWD', 'Manual', 'Cab')
print(out_tab)
out_xtable <- xtable(out_tab[, ],
digits = 3,
label = 'tab:correlation_ind',
caption = 'Correlation Matrix of Log. Prices and Indicator Variables')
tab_file_name <- sprintf('correlation_ind.tex')
tab_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
##################################################
# End
##################################################
